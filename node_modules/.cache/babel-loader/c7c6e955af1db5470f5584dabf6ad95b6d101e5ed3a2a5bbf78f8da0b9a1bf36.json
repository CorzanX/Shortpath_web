{"ast":null,"code":"import axios from 'axios';\nimport undirected_graph from '../undirected_graph.vue';\nexport default {\n  components: {\n    undirected_graph\n  },\n  data() {\n    return {\n      txtData: '',\n      nodes: [],\n      links: [],\n      input_start: '',\n      input_end: '',\n      stp: ''\n    };\n  },\n  methods: {\n    beforeUpload(file) {\n      // 只接受txt文件\n      const isTxt = file.type === 'text/plain';\n      if (!isTxt) {\n        this.$message.error('只能上传txt文件');\n      }\n      return isTxt;\n    },\n    handleSuccess(response, file) {\n      const graphData = response;\n      if (!graphData) {\n        // 处理 graphData 不存在的情况，比如给 nodes 和 links 赋一个空数组\n        this.nodes = [];\n        this.links = [];\n        return;\n      }\n      this.nodes = Object.values(graphData.nodes).map(node => ({\n        id: node.id,\n        name: node.name\n      }));\n      this.links = Object.values(graphData.links).map(link => ({\n        source: link.source,\n        target: link.target,\n        weight: link.weight\n      }));\n      this.txtData = graphData.adjacencyMatrixString;\n    },\n    handleSubmit() {\n      const formData = new FormData();\n      formData.append('input_start', this.input_start);\n      formData.append('input_end', this.input_end);\n      this.$http.post('/getstp', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        // 处理响应\n        this.stp = response.data;\n        console.log(response);\n      }).catch(error => {\n        // 处理错误\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","undirected_graph","components","data","txtData","nodes","links","input_start","input_end","stp","methods","beforeUpload","file","isTxt","type","$message","error","handleSuccess","response","graphData","Object","values","map","node","id","name","link","source","target","weight","adjacencyMatrixString","handleSubmit","formData","FormData","append","$http","post","headers","then","console","log","catch"],"sources":["src/components/Compare/Algcmp_upload.vue"],"sourcesContent":["<template>\n    <div>\n\n        <h1>Please upload the txt file in this format</h1>\n        <h1>example</h1>\n        <p>\n          vertex a<br>\n          vertex b<br>\n          vertex c<br>\n          vertex d<br>\n          edge a b 24<br>\n          edge b d 2<br>\n          edge c b 6<br>\n          edge d c 11<br>\n          </p>\n        <el-upload\n            class=\"upload-demo\"\n            action=\"http://localhost:8088/cmp\"\n            :on-success=\"handleSuccess\"\n            :before-upload=\"beforeUpload\"\n            >\n            <el-button size=\"small\" type=\"primary\">upload</el-button>\n            <div slot=\"tip\" class=\"el-upload__tip\">Only txt files can be uploaded and should not exceed 500kb</div>\n        </el-upload>\n        <div v-if=\"txtData\">\n          <undirected_graph :parentHeight=\"400\" :parentWidth=\"400\" :links=\"links\" :nodes=\"nodes\"/>\n          <h1>Adjacency Matrix</h1>\n          <p   style=\"white-space: pre-line; white-space: pre-wrap;font-family: Courier New ;\">{{txtData}}</p>\n          <div>\n            <el-input v-model=\"input_start\"  placeholder=\"Please enter a starting point\"></el-input>\n            <el-input v-model=\"input_end\" placeholder=\"Please enter an end point\"></el-input>\n            <el-button type=\"primary\" @click=\"handleSubmit\">Submit</el-button>\n          </div>\n          <div v-if=\"stp\">\n            <p style=\"white-space: pre-line; white-space: pre-wrap;\">The shortest path from {{input_start}} to {{input_end}} is {{stp}}</p>\n          </div>\n        </div>\n    </div>\n</template>\n\n<style>\n  p {\n    \n  }\n</style>\n<script>\n  import axios from 'axios';\n  import undirected_graph from '../undirected_graph.vue';\n  export default {\n    components:{\n        undirected_graph,\n      },\n    data() {\n      return {\n        txtData: '',\n        nodes: [],\n        links: [],\n        input_start: '',\n        input_end: '',\n        stp: ''\n      };\n    },\n    methods: {\n      beforeUpload(file) {\n        // 只接受txt文件\n        const isTxt = file.type === 'text/plain';\n        if (!isTxt) {\n          this.$message.error('只能上传txt文件');\n        }\n        return isTxt;\n      },\n      handleSuccess(response,file) {\n        const graphData = response;\n        if (!graphData) {\n          // 处理 graphData 不存在的情况，比如给 nodes 和 links 赋一个空数组\n          this.nodes = [];\n          this.links = [];\n          return;\n        }\n        this.nodes = Object.values(graphData.nodes).map(node => ({ id: node.id, name: node.name }));\n        this.links = Object.values(graphData.links).map(link => ({ source: link.source, target: link.target, weight: link.weight }));\n        this.txtData = graphData.adjacencyMatrixString;\n      },\n\n      handleSubmit() {\n        const formData = new FormData();\n        formData.append('input_start', this.input_start);\n        formData.append('input_end', this.input_end);\n\n        this.$http.post('/getstp', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        })\n        .then(response => {\n          // 处理响应\n          this.stp = response.data;\n          console.log(response);\n        })\n        .catch(error => {\n          // 处理错误\n          console.error(error);\n        });\n      }\n      \n    }\n  }\n</script>"],"mappings":"AA8CA,OAAAA,KAAA;AACA,OAAAC,gBAAA;AACA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;MACAC,KAAA;MACAC,WAAA;MACAC,SAAA;MACAC,GAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAAC,IAAA;MACA;MACA,MAAAC,KAAA,GAAAD,IAAA,CAAAE,IAAA;MACA,KAAAD,KAAA;QACA,KAAAE,QAAA,CAAAC,KAAA;MACA;MACA,OAAAH,KAAA;IACA;IACAI,cAAAC,QAAA,EAAAN,IAAA;MACA,MAAAO,SAAA,GAAAD,QAAA;MACA,KAAAC,SAAA;QACA;QACA,KAAAd,KAAA;QACA,KAAAC,KAAA;QACA;MACA;MACA,KAAAD,KAAA,GAAAe,MAAA,CAAAC,MAAA,CAAAF,SAAA,CAAAd,KAAA,EAAAiB,GAAA,CAAAC,IAAA;QAAAC,EAAA,EAAAD,IAAA,CAAAC,EAAA;QAAAC,IAAA,EAAAF,IAAA,CAAAE;MAAA;MACA,KAAAnB,KAAA,GAAAc,MAAA,CAAAC,MAAA,CAAAF,SAAA,CAAAb,KAAA,EAAAgB,GAAA,CAAAI,IAAA;QAAAC,MAAA,EAAAD,IAAA,CAAAC,MAAA;QAAAC,MAAA,EAAAF,IAAA,CAAAE,MAAA;QAAAC,MAAA,EAAAH,IAAA,CAAAG;MAAA;MACA,KAAAzB,OAAA,GAAAe,SAAA,CAAAW,qBAAA;IACA;IAEAC,aAAA;MACA,MAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,qBAAA3B,WAAA;MACAyB,QAAA,CAAAE,MAAA,mBAAA1B,SAAA;MAEA,KAAA2B,KAAA,CAAAC,IAAA,YAAAJ,QAAA;QACAK,OAAA;UACA;QACA;MACA,GACAC,IAAA,CAAApB,QAAA;QACA;QACA,KAAAT,GAAA,GAAAS,QAAA,CAAAf,IAAA;QACAoC,OAAA,CAAAC,GAAA,CAAAtB,QAAA;MACA,GACAuB,KAAA,CAAAzB,KAAA;QACA;QACAuB,OAAA,CAAAvB,KAAA,CAAAA,KAAA;MACA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
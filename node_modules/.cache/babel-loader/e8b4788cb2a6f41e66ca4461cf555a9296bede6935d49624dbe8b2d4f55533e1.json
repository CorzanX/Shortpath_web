{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  mounted() {\n    this.createDirectedGraph();\n  },\n  methods: {\n    createDirectedGraph() {\n      const svg = d3.select(this.$refs.svgContainer).append('svg').attr('width', 500).attr('height', 500);\n      const nodes = [{\n        id: 0,\n        name: 'A'\n      }, {\n        id: 1,\n        name: 'B'\n      }, {\n        id: 2,\n        name: 'C'\n      }, {\n        id: 3,\n        name: 'D'\n      }, {\n        id: 4,\n        name: 'E'\n      }];\n      const links = [{\n        source: 0,\n        target: 1\n      }, {\n        source: 1,\n        target: 2\n      }, {\n        source: 2,\n        target: 3\n      }, {\n        source: 3,\n        target: 4\n      }, {\n        source: 4,\n        target: 0\n      }, {\n        source: 0,\n        target: 3\n      }];\n      const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id).distance(100)).force('charge', d3.forceManyBody().strength(-500)).force('center', d3.forceCenter(250, 250));\n      const link = svg.selectAll('.link').data(links).enter().append('g').attr('class', 'link').append('line').attr('stroke', 'black').attr('marker-end', 'url(#arrowhead)');\n      link.append('marker').attr('id', 'arrowhead').attr('viewBox', '0 0 10 10').attr('refX', '20').attr('refY', '5').attr('orient', 'auto').attr('markerWidth', '10').attr('markerHeight', '10').append('path').attr('d', 'M 0 0 L 10 5 L 0 10 z');\n      const node = svg.selectAll('.node').data(nodes).enter().append('g').attr('class', 'node').call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));\n      node.append('circle').attr('r', 20).attr('fill', 'white').attr('stroke', 'black');\n      node.append('text').attr('text-anchor', 'middle').attr('dy', '.35em').text(d => d.name);\n      simulation.on('tick', () => {\n        link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n        node.attr('transform', d => `translate(${d.x},${d.y})`);\n      });\n    },\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }\n};","map":{"version":3,"names":["d3","mounted","createDirectedGraph","methods","svg","select","$refs","svgContainer","append","attr","nodes","id","name","links","source","target","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","link","selectAll","data","enter","node","call","drag","on","dragstarted","dragged","dragended","text","x","y","dragstart","event","active","alphaTarget","restart","fx","fy","dragend"],"sources":["src/components/oriented.vue"],"sourcesContent":["<template>\n  <div ref=\"svgContainer\"></div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  mounted() {\n    this.createDirectedGraph();\n  },\n  methods: {\n      createDirectedGraph() {\n        const svg = d3.select(this.$refs.svgContainer)\n    .append('svg')\n    .attr('width', 500)\n    .attr('height', 500);\n\n  const nodes = [\n    { id: 0, name: 'A' },\n    { id: 1, name: 'B' },\n    { id: 2, name: 'C' },\n    { id: 3, name: 'D' },\n    { id: 4, name: 'E' }\n  ];\n\n  const links = [\n    { source: 0, target: 1 },\n    { source: 1, target: 2 },\n    { source: 2, target: 3 },\n    { source: 3, target: 4 },\n    { source: 4, target: 0 },\n    { source: 0, target: 3 }\n  ];\n\n  const simulation = d3.forceSimulation(nodes)\n    .force('link', d3.forceLink(links).id(d => d.id).distance(100))\n    .force('charge', d3.forceManyBody().strength(-500))\n    .force('center', d3.forceCenter(250, 250));\n\n  const link = svg.selectAll('.link')\n    .data(links)\n    .enter()\n    .append('g')\n    .attr('class', 'link')\n    .append('line')\n    .attr('stroke', 'black')\n    .attr('marker-end', 'url(#arrowhead)');\n\n  link.append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '20')\n    .attr('refY', '5')\n    .attr('orient', 'auto')\n    .attr('markerWidth', '10')\n    .attr('markerHeight', '10')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z');\n\n  const node = svg.selectAll('.node')\n    .data(nodes)\n    .enter()\n    .append('g')\n    .attr('class', 'node')\n    .call(d3.drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended));\n\n  node.append('circle')\n    .attr('r', 20)\n    .attr('fill', 'white')\n    .attr('stroke', 'black');\n\n  node.append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dy', '.35em')\n    .text(d => d.name);\n\n  simulation.on('tick', () => {\n    link.attr('x1', d => d.source.x)\n      .attr('y1', d => d.source.y)\n      .attr('x2', d => d.target.x)\n      .attr('y2', d => d.target.y);\n\n    node.attr('transform', d => `translate(${d.x},${d.y})`);\n  });\n      },\n  dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n}\n\n\n  }\n\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
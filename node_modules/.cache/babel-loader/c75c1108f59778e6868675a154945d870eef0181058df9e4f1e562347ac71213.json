{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  data() {\n    return {\n      nodes: [{\n        id: 0,\n        name: 'A'\n      }, {\n        id: 1,\n        name: 'B'\n      }, {\n        id: 2,\n        name: 'C'\n      }, {\n        id: 3,\n        name: 'D'\n      }, {\n        id: 4,\n        name: 'E'\n      }],\n      links: [{\n        source: 0,\n        target: 1\n      }, {\n        source: 1,\n        target: 2\n      }, {\n        source: 2,\n        target: 3\n      }, {\n        source: 3,\n        target: 4\n      }, {\n        source: 4,\n        target: 0\n      }, {\n        source: 0,\n        target: 3\n      }],\n      simulation: null,\n      link: null,\n      node: null,\n      label: null\n    };\n  },\n  mounted() {\n    this.initGraph();\n    console.log(this.$refs.elMain); // 输出元素对象\n  },\n\n  methods: {\n    initGraph() {\n      // 创建力导向布局算法\n      this.simulation = d3.forceSimulation(this.nodes).force(\"link\", d3.forceLink(this.links).id(d => d.id)).force(\"charge\", d3.forceManyBody().strength(-500)).force(\"center\", d3.forceCenter(150, 150));\n\n      // 创建SVG元素\n      const svg = d3.select(this.$refs.svg);\n\n      // 创建边\n      this.link = svg.selectAll(\"line\").data(this.links).enter().append(\"line\").attr(\"stroke\", \"#999\");\n\n      // 创建节点\n      this.node = svg.selectAll(\"circle\").data(this.nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"lightblue\").call(d3.drag().on(\"start\", this.dragstart).on(\"drag\", this.dragged).on(\"end\", this.dragend));\n\n      // 添加文本标签\n      this.label = svg.selectAll(null).data(this.nodes).enter().append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"dy\", \"-1.5em\").text(d => d.name);\n\n      // 将节点和边绑定到力导向布局\n      this.simulation.nodes(this.nodes).on(\"tick\", this.ticked);\n      this.simulation.force(\"link\").links(this.links);\n    },\n    ticked() {\n      this.link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      this.node.attr('cx', d => d.x).attr('cy', d => d.y);\n      this.label.attr('x', d => d.x).attr('y', d => d.y);\n    },\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    },\n    clearMainContent() {\n      this.$refs.elMain.innerHTML = '';\n    }\n  }\n};","map":{"version":3,"names":["d3","data","nodes","id","name","links","source","target","simulation","link","node","label","mounted","initGraph","console","log","$refs","elMain","methods","forceSimulation","force","forceLink","d","forceManyBody","strength","forceCenter","svg","select","selectAll","enter","append","attr","call","drag","on","dragstart","dragged","dragend","text","ticked","x","y","event","active","alphaTarget","restart","fx","fy","clearMainContent","innerHTML"],"sources":["src/components/Introduction/AlgIntro.vue"],"sourcesContent":["<template>\n  <div>\n      <el-container>\n          <el-container>\n            <el-aside width=\"200px\">\n              <el-menu :default-openeds=\"['1']\" router>\n                  <el-submenu index=\"1\">\n                    <template slot=\"title\"><i class=\"el-icon-setting\"></i>Gragh</template>\n                    <el-menu-item-group>\n                      <template slot=\"title\">Shortest Path</template>\n                      <el-menu-item index=\"1-1\" route=\"/algintro/dij\" @click=\"clearMainContent\">Dijkstra</el-menu-item>\n                      <el-menu-item index=\"1-2\" route=\"/algintro/fly\" @click=\"clearMainContent\">Floyd</el-menu-item>\n                      <el-menu-item index=\"1-3\" route=\"/algintro/SPFA\" @click=\"clearMainContent\">SPFA</el-menu-item>\n                      <el-menu-item index=\"1-4\" route=\"/algintro/bf\" @click=\"clearMainContent\">Bellman-Ford</el-menu-item>\n                    </el-menu-item-group>\n                  </el-submenu>\n                </el-menu>\n            </el-aside>\n            <el-container>\n              <el-main>\n                <router-view></router-view>\n                <div>\n                  <svg  ref=\"svg\" width=\"300\" height=\"300\"></svg>\n                  <h1>How do we find the shortest path between two points? </h1>\n                </div>\n              </el-main>\n            </el-container>\n          </el-container>\n        </el-container>          \n  </div>\n</template>\n\n<style>\n  .el-header, .el-footer {\n    background-color: #B3C0D1;\n    color: #333;\n    text-align: center;\n    line-height: 60px;\n  }\n  \n  .el-aside {\n    background-color: #D3DCE6;\n    color: #333;\n    text-align: center;\n    line-height: 200px;\n  }\n  \n  .el-main {\n    background-color: #E9EEF3;\n    color: #333;\n    \n  }\n  \n  body > .el-container {\n    margin-bottom: 40px;\n  }\n  \n  .el-container:nth-child(5) .el-aside,\n  .el-container:nth-child(6) .el-aside {\n    line-height: 260px;\n  }\n\n\n  .el-container:nth-child(7) .el-aside {\n    line-height: 320px;\n  }\n</style>\n\n<script>\n  import * as d3 from 'd3';\n  export default {\n    data() {\n    return {\n      nodes: [\n          { id: 0, name: 'A' },\n          { id: 1, name: 'B' },\n          { id: 2, name: 'C' },\n          { id: 3, name: 'D' },\n          { id: 4, name: 'E' }\n          ],\n      links: [\n          { source: 0, target: 1 },\n          { source: 1, target: 2 },\n          { source: 2, target: 3 },\n          { source: 3, target: 4 },\n          { source: 4, target: 0 },\n          { source: 0, target: 3 }\n          \n        ],\n      simulation: null,\n      link: null,\n      node: null,\n      label: null,\n    };\n  },\n  mounted() {\n    \n    this.initGraph();\n    console.log(this.$refs.elMain); // 输出元素对象\n  },\n  methods: {\n    \n    initGraph() {\n      // 创建力导向布局算法\n      this.simulation = d3.forceSimulation(this.nodes)\n        .force(\"link\", d3.forceLink(this.links).id((d) => d.id))\n        .force(\"charge\", d3.forceManyBody().strength(-500))\n        .force(\"center\", d3.forceCenter(150, 150));\n\n      // 创建SVG元素\n      const svg = d3.select(this.$refs.svg);\n\n       // 创建边\n      this.link = svg\n        .selectAll(\"line\")\n        .data(this.links)\n        .enter()\n        .append(\"line\")\n        .attr(\"stroke\", \"#999\")\n        \n      \n      // 创建节点\n      this.node = svg\n        .selectAll(\"circle\")\n        .data(this.nodes)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", 20)\n        .attr(\"fill\", \"lightblue\")\n        .call(\n          d3\n            .drag()\n            .on(\"start\", this.dragstart)\n            .on(\"drag\", this.dragged)\n            .on(\"end\", this.dragend)\n        );\n\n        // 添加文本标签\n      this.label = svg\n        .selectAll(null)\n        .data(this.nodes)\n        .enter()\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"dy\", \"-1.5em\")\n        .text((d) => d.name);\n\n      // 将节点和边绑定到力导向布局\n      this.simulation.nodes(this.nodes).on(\"tick\", this.ticked);\n      this.simulation.force(\"link\").links(this.links);\n    },\n    ticked() {\n      this.link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n      this.node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n      this.label\n        .attr('x', d => d.x)\n        .attr('y', d => d.y);\n    } ,\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    },\n    clearMainContent() {\n      this.$refs.elMain.innerHTML = '';\n    },\n    \n    }\n  }\n  \n\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
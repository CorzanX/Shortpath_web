{"ast":null,"code":"import Sigma from 'sigma';\nexport default {\n  data() {\n    return {\n      graph: {\n        nodes: [{\n          id: 'n0',\n          label: 'Node 0',\n          x: 0,\n          y: 0,\n          size: 10\n        }, {\n          id: 'n1',\n          label: 'Node 1',\n          x: 100,\n          y: 0,\n          size: 10\n        }, {\n          id: 'n2',\n          label: 'Node 2',\n          x: 200,\n          y: 0,\n          size: 10\n        }, {\n          id: 'n3',\n          label: 'Node 3',\n          x: 300,\n          y: 0,\n          size: 10\n        }, {\n          id: 'n4',\n          label: 'Node 4',\n          x: 0,\n          y: 100,\n          size: 10\n        }, {\n          id: 'n5',\n          label: 'Node 5',\n          x: 100,\n          y: 100,\n          size: 10\n        }, {\n          id: 'n6',\n          label: 'Node 6',\n          x: 200,\n          y: 100,\n          size: 10\n        }, {\n          id: 'n7',\n          label: 'Node 7',\n          x: 300,\n          y: 100,\n          size: 10\n        }],\n        edges: [{\n          id: 'e0',\n          source: 'n0',\n          target: 'n1'\n        }, {\n          id: 'e1',\n          source: 'n1',\n          target: 'n2'\n        }, {\n          id: 'e2',\n          source: 'n2',\n          target: 'n3'\n        }, {\n          id: 'e3',\n          source: 'n0',\n          target: 'n4'\n        }, {\n          id: 'e4',\n          source: 'n1',\n          target: 'n5'\n        }, {\n          id: 'e5',\n          source: 'n2',\n          target: 'n6'\n        }, {\n          id: 'e6',\n          source: 'n3',\n          target: 'n7'\n        }, {\n          id: 'e7',\n          source: 'n4',\n          target: 'n5'\n        }, {\n          id: 'e8',\n          source: 'n5',\n          target: 'n6'\n        }, {\n          id: 'e9',\n          source: 'n6',\n          target: 'n7'\n        }]\n      },\n      sigmaInstance: null\n    };\n  },\n  mounted() {\n    const {\n      graphContainer\n    } = this.$refs;\n    const settings = {\n      defaultNodeColor: '#ec5148',\n      edgeColor: 'default',\n      minEdgeSize: 0.5,\n      maxEdgeSize: 2,\n      enableEdgeHovering: true,\n      edgeHoverColor: 'edge',\n      edgeHoverSizeRatio: 2,\n      defaultEdgeHoverColor: '#000',\n      defaultEdgeHoverSize: 2\n    };\n    const sigmaInstance = new Sigma({\n      graph: this.graph,\n      container: graphContainer,\n      settings\n    });\n    this.sigmaInstance = sigmaInstance;\n  }\n};","map":{"version":3,"names":["Sigma","data","graph","nodes","id","label","x","y","size","edges","source","target","sigmaInstance","mounted","graphContainer","$refs","settings","defaultNodeColor","edgeColor","minEdgeSize","maxEdgeSize","enableEdgeHovering","edgeHoverColor","edgeHoverSizeRatio","defaultEdgeHoverColor","defaultEdgeHoverSize","container"],"sources":["src/components/AlgIntro.vue"],"sourcesContent":["<template>\n  <div>\n      <el-container>\n          <el-container>\n            <el-aside width=\"200px\">\n              <el-menu :default-openeds=\"['1']\">\n                  <el-submenu index=\"1\">\n                    <template slot=\"title\"><i class=\"el-icon-message\"></i>Linear structure</template>\n                    <el-menu-item-group>\n                      <el-submenu index=\"1-1\">\n                        <template slot=\"title\">list</template>\n                        <el-menu-item index=\"1-1-1\">list reverse</el-menu-item>\n                        <el-menu-item index=\"1-1-2\">list merge</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"1-2\">\n                        <template slot=\"title\">queue</template>\n                        <el-menu-item index=\"1-2-1\">queue class</el-menu-item>\n                        <el-menu-item index=\"1-2-2\">Pascal's Triangle</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"1-3\">\n                        <template slot=\"title\">stack</template>\n                        <el-menu-item index=\"1-3-1\">stack class</el-menu-item>\n                        <el-menu-item index=\"1-3-2\">Analog computer</el-menu-item>\n                      </el-submenu>\n                    </el-menu-item-group>\n                  </el-submenu>\n                  <el-submenu index=\"2\">\n                    <template slot=\"title\"><i class=\"el-icon-menu\"></i>Tree structure</template>\n                    <el-menu-item-group>\n                      <el-submenu index=\"2-1\">\n                        <template slot=\"title\">Binary tree</template>\n                        <el-menu-item index=\"2-1-1\">Traversal</el-menu-item>\n                        <el-menu-item index=\"2-1-2\">BST</el-menu-item>\n                        <el-menu-item index=\"2-1-3\">heap</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"2-2\">\n                        <template slot=\"title\">other trees</template>\n                        <el-menu-item index=\"2-2-1\">Trie tree</el-menu-item>\n                        <el-menu-item index=\"2-3-1\">B tree</el-menu-item>\n                        <el-menu-item index=\"2-4-1\">B+ tree</el-menu-item>\n                      </el-submenu>\n                    </el-menu-item-group>\n                    \n                  </el-submenu>\n                  <el-submenu index=\"3\">\n                    <template slot=\"title\"><i class=\"el-icon-setting\"></i>Gragh</template>\n                    <el-menu-item-group>\n                      <el-submenu index=\"3-1\">\n                        <template slot=\"title\">Search</template>\n                        <el-menu-item index=\"3-1-1\">DFS</el-menu-item>\n                        <el-menu-item index=\"3-1-2\">BFS</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"3-2\">\n                        <template slot=\"title\">Minimum Spanning Tree</template>\n                        <el-menu-item index=\"3-2-1\">Kruskal</el-menu-item>\n                        <el-menu-item index=\"3-2-2\">Prime</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"3-3\">\n                        <template slot=\"title\">Shortest Path</template>\n                        <el-menu-item index=\"3-3-1\">Dijkstra</el-menu-item>\n                        <el-menu-item index=\"3-3-2\">Floyd</el-menu-item>\n                        <el-menu-item index=\"3-3-3\">SPFA</el-menu-item>\n                        <el-menu-item index=\"3-3-4\">Bellman-Ford</el-menu-item>\n                      </el-submenu>\n                    </el-menu-item-group>\n                  </el-submenu>\n                </el-menu>\n            </el-aside>\n            <el-container>\n              <el-main >\n                  <div ref=\"graphContainer\" style=\"height: 400px\"></div>\n              </el-main>\n            </el-container>\n          </el-container>\n        </el-container>          \n  </div>\n</template>\n\n<style>\n  .el-header, .el-footer {\n    background-color: #B3C0D1;\n    color: #333;\n    text-align: center;\n    line-height: 60px;\n  }\n  \n  .el-aside {\n    background-color: #D3DCE6;\n    color: #333;\n    text-align: center;\n    line-height: 200px;\n  }\n  \n  .el-main {\n    background-color: #E9EEF3;\n    color: #333;\n    text-align: center;\n  }\n  \n  body > .el-container {\n    margin-bottom: 40px;\n  }\n  \n  .el-container:nth-child(5) .el-aside,\n  .el-container:nth-child(6) .el-aside {\n    line-height: 260px;\n  }\n\n\n  .el-container:nth-child(7) .el-aside {\n    line-height: 320px;\n  }\n</style>\n\n<script>\n  import Sigma from 'sigma'\n  export default {\n    data() {\n    return {\n      graph: {\n        nodes: [\n          { id: 'n0', label: 'Node 0', x: 0, y: 0, size: 10 },\n          { id: 'n1', label: 'Node 1', x: 100, y: 0, size: 10 },\n          { id: 'n2', label: 'Node 2', x: 200, y: 0, size: 10 },\n          { id: 'n3', label: 'Node 3', x: 300, y: 0, size: 10 },\n          { id: 'n4', label: 'Node 4', x: 0, y: 100, size: 10 },\n          { id: 'n5', label: 'Node 5', x: 100, y: 100, size: 10 },\n          { id: 'n6', label: 'Node 6', x: 200, y: 100, size: 10 },\n          { id: 'n7', label: 'Node 7', x: 300, y: 100, size: 10 }\n        ],\n        edges: [\n          { id: 'e0', source: 'n0', target: 'n1' },\n          { id: 'e1', source: 'n1', target: 'n2' },\n          { id: 'e2', source: 'n2', target: 'n3' },\n          { id: 'e3', source: 'n0', target: 'n4' },\n          { id: 'e4', source: 'n1', target: 'n5' },\n          { id: 'e5', source: 'n2', target: 'n6' },\n          { id: 'e6', source: 'n3', target: 'n7' },\n          { id: 'e7', source: 'n4', target: 'n5' },\n          { id: 'e8', source: 'n5', target: 'n6' },\n          { id: 'e9', source: 'n6', target: 'n7' }\n        ]\n      },\n      sigmaInstance: null\n    };\n  },\n  mounted() {\n    const { graphContainer } = this.$refs;\n    const settings = {\n      defaultNodeColor: '#ec5148',\n      edgeColor: 'default',\n      minEdgeSize: 0.5,\n      maxEdgeSize: 2,\n      enableEdgeHovering: true,\n      edgeHoverColor: 'edge',\n      edgeHoverSizeRatio: 2,\n      defaultEdgeHoverColor: '#000',\n      defaultEdgeHoverSize: 2\n    };\n    const sigmaInstance = new Sigma({\n      graph: this.graph,\n      container: graphContainer,\n      settings\n    });\n    this.sigmaInstance = sigmaInstance;\n  }\n  }\n</script>"],"mappings":"AAmHA,OAAAA,KAAA;AACA;EACAC,KAAA;IACA;MACAC,KAAA;QACAC,KAAA,GACA;UAAAC,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,GACA;UAAAJ,EAAA;UAAAC,KAAA;UAAAC,CAAA;UAAAC,CAAA;UAAAC,IAAA;QAAA,EACA;QACAC,KAAA,GACA;UAAAL,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA,GACA;UAAAP,EAAA;UAAAM,MAAA;UAAAC,MAAA;QAAA;MAEA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA;MAAAC;IAAA,SAAAC,KAAA;IACA,MAAAC,QAAA;MACAC,gBAAA;MACAC,SAAA;MACAC,WAAA;MACAC,WAAA;MACAC,kBAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,qBAAA;MACAC,oBAAA;IACA;IACA,MAAAb,aAAA,OAAAZ,KAAA;MACAE,KAAA,OAAAA,KAAA;MACAwB,SAAA,EAAAZ,cAAA;MACAE;IACA;IACA,KAAAJ,aAAA,GAAAA,aAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
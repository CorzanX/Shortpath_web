{"ast":null,"code":"var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c,\n    _setup = _vm._self._setupProxy;\n  return _vm._m(0);\n};\nvar staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c,\n    _setup = _vm._self._setupProxy;\n  return _c(\"div\", [_c(\"h1\", [_vm._v(\"Dijkstra\")]), _c(\"p\", [_vm._v(\"Dijkstra's algorithm is a graph traversal algorithm that is used to find the shortest path between a starting node and all other nodes in a weighted graph. It was developed by Dutch computer scientist Edsger W. Dijkstra in 1956.\")]), _c(\"p\", [_vm._v(\"Dijkstra algorithm is used to find the shortest path from one vertex to all other vertices in the graph. It is suitable for both unweighted graphs and directed weighted graphs.\")]), _c(\"p\", [_vm._v(\"Note that when using Dijkstra algorithm to find the shortest path, the weights of all edges in the graph must be guaranteed to be non-negative, otherwise the search process is easy to make mistakes.\")]), _c(\"h2\", [_vm._v(\"The realization of Dijkstra algorithm\")]), _c(\"img\", {\n    attrs: {\n      src: require(\"../../assets/dij.gif\")\n    }\n  }), _c(\"br\"), _vm._v(\" First of all, we can set up two sets, A and B. \"), _c(\"p\", {\n    staticStyle: {\n      color: \"red\"\n    }\n  }, [_vm._v(\"A is used to store the points where the shortest path has been calculated, and B is used to store the points where the shortest path has not been calculated.\")]), _vm._v(\" So let's do this at any point on the graph, and let's say we choose source at 0. So the distance from all the initial points to 0 we're going to assume is ∞, which means unreachable. The distance from source point 0 to itself is 0, and the initialization is as follows: Then set A is: {0}, set B is: {1,2,3,4,5,6} \"), _c(\"table\", [_c(\"tr\", {\n    staticClass: \"blue-row\"\n  }, [_c(\"td\", [_vm._v(\"Vertex number\")]), _c(\"td\", [_vm._v(\"Distance to source\")])]), _c(\"tr\", {\n    staticClass: \"green-row\"\n  }, [_c(\"td\", [_vm._v(\"0\")]), _c(\"td\", [_vm._v(\"0\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"1\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"2\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"3\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"4\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"5\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"6\")]), _c(\"td\", [_vm._v(\"∞\")])])]), _c(\"h3\", [_vm._v(\"Step2:\")]), _vm._v(\" Select A point from set B to add to set A, which should satisfy the shortest distance from point 0, so we select point 2 to add to set A, and then set A becomes: {0,2}, set B becomes: {1,3,4,5,6}, as shown in the following table \"), _c(\"table\", [_c(\"tr\", {\n    staticClass: \"blue-row\"\n  }, [_c(\"td\", [_vm._v(\"Vertex number\")]), _c(\"td\", [_vm._v(\"Distance to source\")])]), _c(\"tr\", {\n    staticClass: \"green-row\"\n  }, [_c(\"td\", [_vm._v(\"0\")]), _c(\"td\", [_vm._v(\"0\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"1\")]), _c(\"td\", [_vm._v(\"5\")])]), _c(\"tr\", {\n    staticClass: \"green-row\"\n  }, [_c(\"td\", [_vm._v(\"2\")]), _c(\"td\", [_vm._v(\"2\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"3\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"4\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"5\")]), _c(\"td\", [_vm._v(\"∞\")])]), _c(\"tr\", [_c(\"td\", [_vm._v(\"6\")]), _c(\"td\", [_vm._v(\"∞\")])])])]);\n}];\nrender._withStripped = true;\nexport { render, staticRenderFns };","map":{"version":3,"names":["render","_vm","_c","_self","_setup","_setupProxy","_m","staticRenderFns","_v","attrs","src","require","staticStyle","color","staticClass","_withStripped"],"sources":["/Users/corzanx77/Desktop/Vue代码/corzanX/src/components/Introduction/AlgIntro_dij.vue"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c,\n    _setup = _vm._self._setupProxy\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this,\n      _c = _vm._self._c,\n      _setup = _vm._self._setupProxy\n    return _c(\"div\", [\n      _c(\"h1\", [_vm._v(\"Dijkstra\")]),\n      _c(\"p\", [\n        _vm._v(\n          \"Dijkstra's algorithm is a graph traversal algorithm that is used to find the shortest path between a starting node and all other nodes in a weighted graph. It was developed by Dutch computer scientist Edsger W. Dijkstra in 1956.\"\n        ),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"Dijkstra algorithm is used to find the shortest path from one vertex to all other vertices in the graph. It is suitable for both unweighted graphs and directed weighted graphs.\"\n        ),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"Note that when using Dijkstra algorithm to find the shortest path, the weights of all edges in the graph must be guaranteed to be non-negative, otherwise the search process is easy to make mistakes.\"\n        ),\n      ]),\n      _c(\"h2\", [_vm._v(\"The realization of Dijkstra algorithm\")]),\n      _c(\"img\", { attrs: { src: require(\"../../assets/dij.gif\") } }),\n      _c(\"br\"),\n      _vm._v(\" First of all, we can set up two sets, A and B. \"),\n      _c(\"p\", { staticStyle: { color: \"red\" } }, [\n        _vm._v(\n          \"A is used to store the points where the shortest path has been calculated, and B is used to store the points where the shortest path has not been calculated.\"\n        ),\n      ]),\n      _vm._v(\n        \" So let's do this at any point on the graph, and let's say we choose source at 0. So the distance from all the initial points to 0 we're going to assume is ∞, which means unreachable. The distance from source point 0 to itself is 0, and the initialization is as follows: Then set A is: {0}, set B is: {1,2,3,4,5,6} \"\n      ),\n      _c(\"table\", [\n        _c(\"tr\", { staticClass: \"blue-row\" }, [\n          _c(\"td\", [_vm._v(\"Vertex number\")]),\n          _c(\"td\", [_vm._v(\"Distance to source\")]),\n        ]),\n        _c(\"tr\", { staticClass: \"green-row\" }, [\n          _c(\"td\", [_vm._v(\"0\")]),\n          _c(\"td\", [_vm._v(\"0\")]),\n        ]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"1\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"2\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"3\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"4\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"5\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"6\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n      ]),\n      _c(\"h3\", [_vm._v(\"Step2:\")]),\n      _vm._v(\n        \" Select A point from set B to add to set A, which should satisfy the shortest distance from point 0, so we select point 2 to add to set A, and then set A becomes: {0,2}, set B becomes: {1,3,4,5,6}, as shown in the following table \"\n      ),\n      _c(\"table\", [\n        _c(\"tr\", { staticClass: \"blue-row\" }, [\n          _c(\"td\", [_vm._v(\"Vertex number\")]),\n          _c(\"td\", [_vm._v(\"Distance to source\")]),\n        ]),\n        _c(\"tr\", { staticClass: \"green-row\" }, [\n          _c(\"td\", [_vm._v(\"0\")]),\n          _c(\"td\", [_vm._v(\"0\")]),\n        ]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"1\")]), _c(\"td\", [_vm._v(\"5\")])]),\n        _c(\"tr\", { staticClass: \"green-row\" }, [\n          _c(\"td\", [_vm._v(\"2\")]),\n          _c(\"td\", [_vm._v(\"2\")]),\n        ]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"3\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"4\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"5\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n        _c(\"tr\", [_c(\"td\", [_vm._v(\"6\")]), _c(\"td\", [_vm._v(\"∞\")])]),\n      ]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
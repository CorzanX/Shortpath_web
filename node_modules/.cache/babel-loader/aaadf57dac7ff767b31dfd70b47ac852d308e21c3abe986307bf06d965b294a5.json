{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  data() {\n    return {\n      nodes: [{\n        id: 0,\n        name: 'A'\n      }, {\n        id: 1,\n        name: 'B'\n      }, {\n        id: 2,\n        name: 'C'\n      }, {\n        id: 3,\n        name: 'D'\n      }, {\n        id: 4,\n        name: 'E'\n      }],\n      links: [{\n        source: 0,\n        target: 1\n      }, {\n        source: 1,\n        target: 2\n      }, {\n        source: 2,\n        target: 3\n      }, {\n        source: 3,\n        target: 4\n      }, {\n        source: 4,\n        target: 0\n      }, {\n        source: 0,\n        target: 3\n      }],\n      width: 500,\n      height: 500,\n      simulation: null,\n      link: null,\n      node: null,\n      label: null\n    };\n  },\n  mounted() {\n    this.initGraph();\n  },\n  methods: {\n    initGraph() {\n      // 创建力导向布局算法\n      this.simulation = d3.forceSimulation(this.nodes).force(\"link\", d3.forceLink(this.links).id(d => d.id)).force(\"charge\", d3.forceManyBody().strength(-500)).force(\"center\", d3.forceCenter(150, 150));\n\n      // 创建SVG元素\n      const svg = d3.select(this.$refs.svg);\n\n      // 创建边\n      this.link = svg.selectAll(\"line\").data(this.links).enter().append(\"line\").attr(\"stroke\", \"#999\");\n\n      // 创建节点\n      this.node = svg.selectAll(\"circle\").data(this.nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"lightblue\").call(d3.drag().on(\"start\", this.dragstart).on(\"drag\", this.dragged).on(\"end\", this.dragend));\n\n      // 添加文本标签\n      this.label = svg.selectAll(null).data(this.nodes).enter().append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"dy\", \"-1.5em\").text(d => d.name);\n\n      // 将节点和边绑定到力导向布局\n      this.simulation.nodes(this.nodes).on(\"tick\", this.ticked);\n      this.simulation.force(\"link\").links(this.links);\n    },\n    ticked() {\n      this.link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      this.node.attr('cx', d => d.x).attr('cy', d => d.y);\n      this.label.attr('x', d => d.x).attr('y', d => d.y);\n    },\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }\n};","map":{"version":3,"names":["d3","data","nodes","id","name","links","source","target","width","height","simulation","link","node","label","mounted","initGraph","methods","forceSimulation","force","forceLink","d","forceManyBody","strength","forceCenter","svg","select","$refs","selectAll","enter","append","attr","call","drag","on","dragstart","dragged","dragend","text","ticked","x","y","event","active","alphaTarget","restart","fx","fy"],"sources":["src/components/AlgIntro.vue"],"sourcesContent":["<template>\n  <div>\n      <el-container>\n          <el-container>\n            <el-aside width=\"200px\">\n              <el-menu :default-openeds=\"['1']\">\n                  <el-submenu index=\"1\">\n                    <template slot=\"title\"><i class=\"el-icon-message\"></i>Linear structure</template>\n                    <el-menu-item-group>\n                      <el-submenu index=\"1-1\">\n                        <template slot=\"title\">list</template>\n                        <el-menu-item index=\"1-1-1\">list reverse</el-menu-item>\n                        <el-menu-item index=\"1-1-2\">list merge</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"1-2\">\n                        <template slot=\"title\">queue</template>\n                        <el-menu-item index=\"1-2-1\">queue class</el-menu-item>\n                        <el-menu-item index=\"1-2-2\">Pascal's Triangle</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"1-3\">\n                        <template slot=\"title\">stack</template>\n                        <el-menu-item index=\"1-3-1\">stack class</el-menu-item>\n                        <el-menu-item index=\"1-3-2\">Analog computer</el-menu-item>\n                      </el-submenu>\n                    </el-menu-item-group>\n                  </el-submenu>\n                  <el-submenu index=\"2\">\n                    <template slot=\"title\"><i class=\"el-icon-menu\"></i>Tree structure</template>\n                    <el-menu-item-group>\n                      <el-submenu index=\"2-1\">\n                        <template slot=\"title\">Binary tree</template>\n                        <el-menu-item index=\"2-1-1\">Traversal</el-menu-item>\n                        <el-menu-item index=\"2-1-2\">BST</el-menu-item>\n                        <el-menu-item index=\"2-1-3\">heap</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"2-2\">\n                        <template slot=\"title\">other trees</template>\n                        <el-menu-item index=\"2-2-1\">Trie tree</el-menu-item>\n                        <el-menu-item index=\"2-3-1\">B tree</el-menu-item>\n                        <el-menu-item index=\"2-4-1\">B+ tree</el-menu-item>\n                      </el-submenu>\n                    </el-menu-item-group>\n                    \n                  </el-submenu>\n                  <el-submenu index=\"3\">\n                    <template slot=\"title\"><i class=\"el-icon-setting\"></i>Gragh</template>\n                    <el-menu-item-group>\n                      <el-submenu index=\"3-1\">\n                        <template slot=\"title\">Search</template>\n                        <el-menu-item index=\"3-1-1\">DFS</el-menu-item>\n                        <el-menu-item index=\"3-1-2\">BFS</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"3-2\">\n                        <template slot=\"title\">Minimum Spanning Tree</template>\n                        <el-menu-item index=\"3-2-1\">Kruskal</el-menu-item>\n                        <el-menu-item index=\"3-2-2\">Prime</el-menu-item>\n                      </el-submenu>\n                      <el-submenu index=\"3-3\">\n                        <template slot=\"title\">Shortest Path</template>\n                        <el-menu-item index=\"3-3-1\">Dijkstra</el-menu-item>\n                        <el-menu-item index=\"3-3-2\">Floyd</el-menu-item>\n                        <el-menu-item index=\"3-3-3\">SPFA</el-menu-item>\n                        <el-menu-item index=\"3-3-4\">Bellman-Ford</el-menu-item>\n                      </el-submenu>\n                    </el-menu-item-group>\n                  </el-submenu>\n                </el-menu>\n            </el-aside>\n            <el-container>\n              <el-main >\n                <div>\n                  <svg  ref=\"svg\" width=\"300\" height=\"300\"></svg>\n                  <h1>graph1</h1>\n                </div>\n                \n              </el-main>\n            </el-container>\n          </el-container>\n        </el-container>          \n  </div>\n</template>\n\n<style>\n  .el-header, .el-footer {\n    background-color: #B3C0D1;\n    color: #333;\n    text-align: center;\n    line-height: 60px;\n  }\n  \n  .el-aside {\n    background-color: #D3DCE6;\n    color: #333;\n    text-align: center;\n    line-height: 200px;\n  }\n  \n  .el-main {\n    background-color: #E9EEF3;\n    color: #333;\n    text-align: center;\n  }\n  \n  body > .el-container {\n    margin-bottom: 40px;\n  }\n  \n  .el-container:nth-child(5) .el-aside,\n  .el-container:nth-child(6) .el-aside {\n    line-height: 260px;\n  }\n\n\n  .el-container:nth-child(7) .el-aside {\n    line-height: 320px;\n  }\n</style>\n\n<script>\n  import * as d3 from 'd3';\n  export default {\n    data() {\n    return {\n      nodes: [\n          { id: 0, name: 'A' },\n          { id: 1, name: 'B' },\n          { id: 2, name: 'C' },\n          { id: 3, name: 'D' },\n          { id: 4, name: 'E' }\n          ],\n      links: [\n          { source: 0, target: 1 },\n          { source: 1, target: 2 },\n          { source: 2, target: 3 },\n          { source: 3, target: 4 },\n          { source: 4, target: 0 },\n          { source: 0, target: 3 }\n          \n        ],\n      width: 500,\n      height: 500,\n      simulation: null,\n      link: null,\n      node: null,\n      label: null,\n    };\n  },\n  mounted() {\n    this.initGraph();\n  },\n  methods: {\n    initGraph() {\n      // 创建力导向布局算法\n      this.simulation = d3.forceSimulation(this.nodes)\n        .force(\"link\", d3.forceLink(this.links).id((d) => d.id))\n        .force(\"charge\", d3.forceManyBody().strength(-500))\n        .force(\"center\", d3.forceCenter(150, 150));\n\n      // 创建SVG元素\n      const svg = d3.select(this.$refs.svg);\n\n       // 创建边\n      this.link = svg\n        .selectAll(\"line\")\n        .data(this.links)\n        .enter()\n        .append(\"line\")\n        .attr(\"stroke\", \"#999\");\n      \n      // 创建节点\n      this.node = svg\n        .selectAll(\"circle\")\n        .data(this.nodes)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", 20)\n        .attr(\"fill\", \"lightblue\")\n        .call(\n          d3\n            .drag()\n            .on(\"start\", this.dragstart)\n            .on(\"drag\", this.dragged)\n            .on(\"end\", this.dragend)\n        );\n\n        // 添加文本标签\n      this.label = svg\n        .selectAll(null)\n        .data(this.nodes)\n        .enter()\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"dy\", \"-1.5em\")\n        .text((d) => d.name);\n\n      // 将节点和边绑定到力导向布局\n      this.simulation.nodes(this.nodes).on(\"tick\", this.ticked);\n      this.simulation.force(\"link\").links(this.links);\n    },\n    ticked() {\n      this.link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n      this.node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n      this.label\n        .attr('x', d => d.x)\n        .attr('y', d => d.y);\n    } ,\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    }\n  }\n  \n\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
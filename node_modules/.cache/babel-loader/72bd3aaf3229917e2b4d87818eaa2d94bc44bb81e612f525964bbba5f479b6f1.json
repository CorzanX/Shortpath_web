{"ast":null,"code":"var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm._m(0);\n};\nvar staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", [_c(\"h1\", [_vm._v(\"Dijkstra\")]), _c(\"p\", [_vm._v(\"Dijkstra's algorithm is a graph traversal algorithm that is used to find the shortest path between a starting node and all other nodes in a weighted graph. It was developed by Dutch computer scientist Edsger W. Dijkstra in 1956.\")]), _c(\"br\"), _c(\"p\", [_vm._v(\"Dijkstra algorithm is used to find the shortest path from one vertex to all other vertices in the graph. It is suitable for both unweighted graphs and directed weighted graphs.\")]), _c(\"p\", [_vm._v(\"Note that when using Dijkstra algorithm to find the shortest path, the weights of all edges in the graph must be guaranteed to be non-negative, otherwise the search process is easy to make mistakes.\")])]);\n}];\nrender._withStripped = true;\nexport { render, staticRenderFns };","map":{"version":3,"names":["render","_vm","_c","_self","_m","staticRenderFns","_v","_withStripped"],"sources":["/Users/corzanx77/Desktop/Vue代码/corzanX/src/components/Introduction/AlgIntro_dij.vue"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this,\n      _c = _vm._self._c\n    return _c(\"div\", [\n      _c(\"h1\", [_vm._v(\"Dijkstra\")]),\n      _c(\"p\", [\n        _vm._v(\n          \"Dijkstra's algorithm is a graph traversal algorithm that is used to find the shortest path between a starting node and all other nodes in a weighted graph. It was developed by Dutch computer scientist Edsger W. Dijkstra in 1956.\"\n        ),\n      ]),\n      _c(\"br\"),\n      _c(\"p\", [\n        _vm._v(\n          \"Dijkstra algorithm is used to find the shortest path from one vertex to all other vertices in the graph. It is suitable for both unweighted graphs and directed weighted graphs.\"\n        ),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"Note that when using Dijkstra algorithm to find the shortest path, the weights of all edges in the graph must be guaranteed to be non-negative, otherwise the search process is easy to make mistakes.\"\n        ),\n      ]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":"AAAA,IAAIA,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC7B,IAAIC,GAAG,GAAG,IAAI;IACZC,EAAE,GAAGD,GAAG,CAACE,KAAK,CAACD,EAAE;EACnB,OAAOD,GAAG,CAACG,EAAE,CAAC,CAAC,CAAC;AAClB,CAAC;AACD,IAAIC,eAAe,GAAG,CACpB,YAAY;EACV,IAAIJ,GAAG,GAAG,IAAI;IACZC,EAAE,GAAGD,GAAG,CAACE,KAAK,CAACD,EAAE;EACnB,OAAOA,EAAE,CAAC,KAAK,EAAE,CACfA,EAAE,CAAC,IAAI,EAAE,CAACD,GAAG,CAACK,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,EAC9BJ,EAAE,CAAC,GAAG,EAAE,CACND,GAAG,CAACK,EAAE,CACJ,sOAAsO,CACvO,CACF,CAAC,EACFJ,EAAE,CAAC,IAAI,CAAC,EACRA,EAAE,CAAC,GAAG,EAAE,CACND,GAAG,CAACK,EAAE,CACJ,kLAAkL,CACnL,CACF,CAAC,EACFJ,EAAE,CAAC,GAAG,EAAE,CACND,GAAG,CAACK,EAAE,CACJ,wMAAwM,CACzM,CACF,CAAC,CACH,CAAC;AACJ,CAAC,CACF;AACDN,MAAM,CAACO,aAAa,GAAG,IAAI;AAE3B,SAASP,MAAM,EAAEK,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}
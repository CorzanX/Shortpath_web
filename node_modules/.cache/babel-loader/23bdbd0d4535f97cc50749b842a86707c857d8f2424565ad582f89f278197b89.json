{"ast":null,"code":"export default {\n  data() {\n    return {\n      code: `\nstruct Edge {\n    int destination;\n    int weight;\n};\n\ntypedef std::vector<std::vector<Edge>> Graph;\n\nstd::vector<int> Dijkstra(const Graph& graph, int source) {\n    int numVertices = graph.size();\n    std::vector<int> distances(numVertices, INF);\n    distances[source] = 0;\n\n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;\n    pq.push(std::make_pair(0, source));\n\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        pq.pop();\n\n        for (const Edge& edge : graph[u]) {\n            int v = edge.destination;\n            int weight = edge.weight;\n\n            if (distances[v] > distances[u] + weight) {\n                distances[v] = distances[u] + weight;\n                pq.push(std::make_pair(distances[v], v));\n            }\n        }\n    }\n\n    return distances;\n}\n            `\n    };\n  }\n};","map":{"version":3,"names":["data","code"],"sources":["src/components/Introduction/dij/dij_cpp.vue"],"sourcesContent":["<template>\n    <div>\n        <pre v-highlightA>\n            <code class=\"cpp\">\n                {{code}}\n            </code>\n        </pre>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    data(){\n        return {\ncode:`\nstruct Edge {\n    int destination;\n    int weight;\n};\n\ntypedef std::vector<std::vector<Edge>> Graph;\n\nstd::vector<int> Dijkstra(const Graph& graph, int source) {\n    int numVertices = graph.size();\n    std::vector<int> distances(numVertices, INF);\n    distances[source] = 0;\n\n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;\n    pq.push(std::make_pair(0, source));\n\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        pq.pop();\n\n        for (const Edge& edge : graph[u]) {\n            int v = edge.destination;\n            int weight = edge.weight;\n\n            if (distances[v] > distances[u] + weight) {\n                distances[v] = distances[u] + weight;\n                pq.push(std::make_pair(distances[v], v));\n            }\n        }\n    }\n\n    return distances;\n}\n            `\n        }\n    }\n}\n</script>\n\n<style scoped>\npre {\n  background-color: #f4f4f4;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  font-size: 14px;\n}\n\ncode {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  font-size: 14px;\n}\n\n</style>"],"mappings":"AAYA;EACAA,KAAA;IACA;MACAC,IAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
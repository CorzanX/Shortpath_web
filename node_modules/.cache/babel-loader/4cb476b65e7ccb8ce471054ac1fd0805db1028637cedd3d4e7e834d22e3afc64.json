{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.drawGraph();\n  },\n  methods: {\n    drawGraph() {\n      const svg = d3.select(this.$refs.graph);\n      const simulation = d3.forceSimulation().force(\"link\", d3.forceLink().id(function (d) {\n        return d.id;\n      })).force(\"charge\", d3.forceManyBody().strength(-200)).force(\"center\", d3.forceCenter(svg.attr(\"width\") / 2, svg.attr(\"height\") / 2));\n      const nodes = [{\n        id: 0,\n        name: 'A'\n      }, {\n        id: 1,\n        name: 'B'\n      }, {\n        id: 2,\n        name: 'C'\n      }, {\n        id: 3,\n        name: 'D'\n      }, {\n        id: 4,\n        name: 'E'\n      }];\n      const links = [{\n        source: 0,\n        target: 1,\n        weight: 5\n      }, {\n        source: 1,\n        target: 2,\n        weight: 3\n      }, {\n        source: 2,\n        target: 3,\n        weight: 4\n      }, {\n        source: 3,\n        target: 4,\n        weight: 6\n      }, {\n        source: 4,\n        target: 0,\n        weight: 7\n      }, {\n        source: 0,\n        target: 3,\n        weight: 7\n      }, {\n        source: 3,\n        target: 0,\n        weight: 7\n      }];\n      const link = svg.append(\"g\").selectAll(\"line\").data(links).enter().append(\"line\").attr(\"class\", \"link\").attr(\"stroke\", \"#999\").style(\"stroke-width\", \"1.5px\");\n      const node = svg.append(\"g\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"r\", 10).attr(\"fill\", \"lightblue\").call(d4.drag().on(\"start\", dragstart).on(\"drag\", dragged).on(\"end\", dragend));\n\n      // 添加文本标签\n      const label = svg.append(\"g\").selectAll(null).data(nodes).enter().append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"dy\", \"-1.5em\").text(d => d.name);\n      function update() {\n        node.attr(\"cx\", function (d) {\n          return d.x;\n        }).attr(\"cy\", function (d) {\n          return d.y;\n        });\n        link.attr(\"x1\", function (d) {\n          return d.source.x;\n        }).attr(\"y1\", function (d) {\n          return d.source.y;\n        }).attr(\"x2\", function (d) {\n          return d.target.x;\n        }).attr(\"y2\", function (d) {\n          return d.target.y;\n        });\n        label.attr('x', d => d.x).attr('y', d => d.y);\n      }\n      simulation.nodes(nodes).on(\"tick\", update);\n      simulation.force(\"link\").links(links);\n      svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 20).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"class\", \"arrow\");\n      link.attr(\"marker-end\", \"url(#arrow)\");\n      function dragstart(d) {\n        if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      function dragged(d) {\n        d.x = d3.event.x;\n        d.y = d3.event.y;\n      }\n      function dragend(d) {\n        if (!d3.event.active) this.simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["d3","mounted","drawGraph","methods","svg","select","$refs","graph","simulation","forceSimulation","force","forceLink","id","d","forceManyBody","strength","forceCenter","attr","nodes","name","links","source","target","weight","link","append","selectAll","data","enter","style","node","call","d4","drag","on","dragstart","dragged","dragend","label","text","update","x","y","event","active","alphaTarget","restart","fx","fy"],"sources":["src/components/oriented.vue"],"sourcesContent":["<template>\n  <div>\n    <svg ref=\"graph\" width=\"200\" height=\"200\"></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    this.drawGraph();\n  },\n  methods: {\n    drawGraph() {\n      const svg = d3.select(this.$refs.graph);\n\n      const simulation = d3.forceSimulation()\n        .force(\"link\", d3.forceLink().id(function(d) { return d.id; }))\n        .force(\"charge\", d3.forceManyBody().strength(-200))\n        .force(\"center\", d3.forceCenter(svg.attr(\"width\") / 2, svg.attr(\"height\") / 2));\n\n      const nodes = [\n        { id: 0, name: 'A' },\n        { id: 1, name: 'B' },\n        { id: 2, name: 'C' },\n        { id: 3, name: 'D' },\n        { id: 4, name: 'E' }\n      ];\n\n      const links = [\n        { source: 0, target: 1, weight: 5 },\n        { source: 1, target: 2, weight: 3 },\n        { source: 2, target: 3, weight: 4 },\n        { source: 3, target: 4, weight: 6 },\n        { source: 4, target: 0, weight: 7 },\n        { source: 0, target: 3, weight: 7 },\n        { source: 3, target: 0, weight: 7 }\n      ];\n\n      const link = svg.append(\"g\")\n        .selectAll(\"line\")\n        .data(links)\n        .enter().append(\"line\")\n        .attr(\"class\", \"link\")\n        .attr(\"stroke\", \"#999\")\n        .style(\"stroke-width\", \"1.5px\");\n\n      const node = svg.append(\"g\")\n        .selectAll(\"circle\")\n        .data(nodes)\n        .enter().append(\"circle\")\n        .attr(\"class\", \"node\")\n        .attr(\"r\", 10)\n        .attr(\"fill\", \"lightblue\")\n        .call(\n          d4\n            .drag()\n            .on(\"start\", dragstart)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragend)\n        );\n\n        // 添加文本标签\n      const label = svg.append(\"g\")\n        .selectAll(null)\n        .data(nodes)\n        .enter()\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"dy\", \"-1.5em\")\n        .text((d) => d.name);\n      \n      function update() {\n        node.attr(\"cx\", function(d) { return d.x; })\n          .attr(\"cy\", function(d) { return d.y; });\n\n        link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n        label\n          .attr('x', d => d.x)\n          .attr('y', d => d.y);\n      }\n\n      simulation.nodes(nodes).on(\"tick\", update);\n      simulation.force(\"link\").links(links);\n\n      svg.append(\"defs\").append(\"marker\")\n        .attr(\"id\", \"arrow\")\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 20)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\n        .attr(\"class\", \"arrow\");\n\n      link.attr(\"marker-end\", \"url(#arrow)\");\n      function dragstart(d) {\n        if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      function dragged(d) {\n        d.x = d3.event.x;\n        d.y = d3.event.y;\n      }\n      function dragend(d) {\n        if (!d3.event.active) this.simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
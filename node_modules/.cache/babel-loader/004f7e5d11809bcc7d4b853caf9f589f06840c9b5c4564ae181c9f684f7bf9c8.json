{"ast":null,"code":"export default {\n  data() {\n    return {\n      code: `\nclass Edge {\n    int destination;\n    int weight;\n\n    public Edge(int destination, int weight) {\n        this.destination = destination;\n        this.weight = weight;\n    }\n}\n\npublic class Dijkstra {\n    static final int INF = Integer.MAX_VALUE;\n\n    public static List<Integer> dijkstra(List<List<Edge>> graph, int source) {\n        int numVertices = graph.size();\n        int[] distances = new int[numVertices];\n        Arrays.fill(distances, INF);\n        distances[source] = 0;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        pq.offer(new int[]{0, source});\n\n        while (!pq.isEmpty()) {\n            int[] node = pq.poll();\n            int dist = node[0];\n            int u = node[1];\n\n            if (dist > distances[u]) {\n                continue;\n            }\n\n            for (Edge edge : graph.get(u)) {\n                int v = edge.destination;\n                int weight = edge.weight;\n\n                if (distances[v] > distances[u] + weight) {\n                    distances[v] = distances[u] + weight;\n                    pq.offer(new int[]{distances[v], v});\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numVertices; i++) {\n            result.add(distances[i]);\n        }\n        return result;\n    }\n            `\n    };\n  }\n};","map":{"version":3,"names":["data","code"],"sources":["src/components/Introduction/dij/dij_java.vue"],"sourcesContent":["<template>\n    <div>\n        <pre v-highlightA>\n            <code class=\"java\">\n                {{code}}\n            </code>\n        </pre>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    data(){\n        return {\ncode:`\nclass Edge {\n    int destination;\n    int weight;\n\n    public Edge(int destination, int weight) {\n        this.destination = destination;\n        this.weight = weight;\n    }\n}\n\npublic class Dijkstra {\n    static final int INF = Integer.MAX_VALUE;\n\n    public static List<Integer> dijkstra(List<List<Edge>> graph, int source) {\n        int numVertices = graph.size();\n        int[] distances = new int[numVertices];\n        Arrays.fill(distances, INF);\n        distances[source] = 0;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        pq.offer(new int[]{0, source});\n\n        while (!pq.isEmpty()) {\n            int[] node = pq.poll();\n            int dist = node[0];\n            int u = node[1];\n\n            if (dist > distances[u]) {\n                continue;\n            }\n\n            for (Edge edge : graph.get(u)) {\n                int v = edge.destination;\n                int weight = edge.weight;\n\n                if (distances[v] > distances[u] + weight) {\n                    distances[v] = distances[u] + weight;\n                    pq.offer(new int[]{distances[v], v});\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numVertices; i++) {\n            result.add(distances[i]);\n        }\n        return result;\n    }\n            `\n        }\n    }\n}\n</script>\n\n<style scoped>\npre {\n  background-color: #f4f4f4;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  font-size: 14px;\n}\n\ncode {\n  font-family: Consolas, Monaco, 'Andale Mono', monospace;\n  font-size: 14px;\n}\n\n</style>"],"mappings":"AAYA;EACAA,KAAA;IACA;MACAC,IAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
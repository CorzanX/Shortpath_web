{"ast":null,"code":"import 'prismjs';\nimport 'prismjs/themes/prism.css'; // 导入Prism.js的默认样式文件\nimport 'prismjs/components/prism-javascript'; // 导入所需的语言文件，例如JavaScript\n\nexport default {\n  mounted() {\n    Prism.highlightAll();\n  }\n};","map":{"version":3,"names":["mounted","Prism","highlightAll"],"sources":["src/components/Introduction/dij/dij_cpp.vue"],"sourcesContent":["<template>\n    <div>\n        <pre class=\"language-cpp\">\n            <code>\n                struct Edge {\n    int destination;\n    int weight;\n};\n\ntypedef std::vector<std::vector<Edge>> Graph;\n\nstd::vector<int> Dijkstra(const Graph& graph, int source) {\n    int numVertices = graph.size();\n    std::vector<int> distances(numVertices, INF);\n    distances[source] = 0;\n\n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;\n    pq.push(std::make_pair(0, source));\n\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        pq.pop();\n\n        for (const Edge& edge : graph[u]) {\n            int v = edge.destination;\n            int weight = edge.weight;\n\n            if (distances[v] > distances[u] + weight) {\n                distances[v] = distances[u] + weight;\n                pq.push(std::make_pair(distances[v], v));\n            }\n        }\n    }\n\n    return distances;\n}\n            </code>\n        </pre>\n    </div>\n</template>\n<script>\n    import 'prismjs';\n    import 'prismjs/themes/prism.css'; // 导入Prism.js的默认样式文件\n    import 'prismjs/components/prism-javascript'; // 导入所需的语言文件，例如JavaScript\n\n    export default {\n        mounted() {\n            Prism.highlightAll();\n        }\n    }\n</script>\n\n<style scoped>\n    \n</style>\n\n"],"mappings":"AAyCA;AACA;AACA;;AAEA;EACAA,QAAA;IACAC,KAAA,CAAAC,YAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  name: 'undirected_Graph',\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    links: {\n      type: Array,\n      required: true\n    },\n    parentWidth: Number,\n    parentHeight: Number\n  },\n  mounted() {\n    this.initGraph();\n  },\n  methods: {\n    initGraph() {\n      // 创建力导向布局算法\n      this.simulation = d3.forceSimulation(this.nodes).force(\"link\", d3.forceLink(this.links).id(d => d.id)).force(\"charge\", d3.forceManyBody().strength(-500)).force(\"center\", d3.forceCenter(this.parentWidth / 2, this.parentHeight / 2));\n\n      // 创建SVG元素\n      const svg = d3.select(this.$refs.svg);\n\n      // 创建边\n      this.link = svg.selectAll(\"line\").data(this.links).enter().append(\"line\").attr(\"stroke\", \"#999\");\n\n      // 创建节点\n      this.node = svg.selectAll(\"circle\").data(this.nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"lightblue\").call(d3.drag().on(\"start\", this.dragstart).on(\"drag\", this.dragged).on(\"end\", this.dragend));\n\n      // 添加文本标签\n      this.label = svg.selectAll(null).data(this.nodes).enter().append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"dy\", \"-1.5em\").text(d => d.name);\n\n      // 将节点和边绑定到力导向布局\n      this.simulation.nodes(this.nodes).on(\"tick\", this.ticked);\n      this.simulation.force(\"link\").links(this.links);\n    },\n    ticked() {\n      this.link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      this.node.attr('cx', d => d.x).attr('cy', d => d.y);\n      this.label.attr('x', d => d.x).attr('y', d => d.y);\n    },\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }\n};","map":{"version":3,"names":["d3","name","props","nodes","type","Array","required","links","parentWidth","Number","parentHeight","mounted","initGraph","methods","simulation","forceSimulation","force","forceLink","id","d","forceManyBody","strength","forceCenter","svg","select","$refs","link","selectAll","data","enter","append","attr","node","call","drag","on","dragstart","dragged","dragend","label","text","ticked","source","x","y","target","event","active","alphaTarget","restart","fx","fy"],"sources":["src/components/undirected_graph.vue"],"sourcesContent":["<template>\n  <div>\n    <svg ref=\"svg\" :width=\"parentWidth\" :height=\"parentHeight\"></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n    name: 'undirected_Graph',\n  props: {\n    nodes: {\n      type: Array,\n      required: true,\n    },\n    links: {\n      type: Array,\n      required: true,\n    },\n    parentWidth: Number,\n    parentHeight: Number,\n  },\n  mounted() {\n    this.initGraph();\n  },\n  methods: {\n    initGraph() {\n      // 创建力导向布局算法\n      this.simulation = d3.forceSimulation(this.nodes)\n        .force(\"link\", d3.forceLink(this.links).id((d) => d.id))\n        .force(\"charge\", d3.forceManyBody().strength(-500))\n        .force(\"center\", d3.forceCenter(this.parentWidth / 2, this.parentHeight / 2));\n\n      // 创建SVG元素\n      const svg = d3.select(this.$refs.svg);\n\n      // 创建边\n      this.link = svg\n        .selectAll(\"line\")\n        .data(this.links)\n        .enter()\n        .append(\"line\")\n        .attr(\"stroke\", \"#999\")\n        \n      \n      // 创建节点\n      this.node = svg\n        .selectAll(\"circle\")\n        .data(this.nodes)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", 20)\n        .attr(\"fill\", \"lightblue\")\n        .call(\n          d3\n            .drag()\n            .on(\"start\", this.dragstart)\n            .on(\"drag\", this.dragged)\n            .on(\"end\", this.dragend)\n        );\n\n        // 添加文本标签\n      this.label = svg\n        .selectAll(null)\n        .data(this.nodes)\n        .enter()\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"dy\", \"-1.5em\")\n        .text((d) => d.name);\n      \n      // 将节点和边绑定到力导向布局\n      this.simulation.nodes(this.nodes).on(\"tick\", this.ticked);\n      this.simulation.force(\"link\").links(this.links);\n    },\n    ticked() {\n      this.link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n      this.node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n      this.label\n        .attr('x', d => d.x)\n        .attr('y', d => d.y);\n    } ,\n    dragstart(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragged(d) {\n      d.x = d3.event.x;\n      d.y = d3.event.y;\n    },\n    dragend(d) {\n      if (!d3.event.active) this.simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
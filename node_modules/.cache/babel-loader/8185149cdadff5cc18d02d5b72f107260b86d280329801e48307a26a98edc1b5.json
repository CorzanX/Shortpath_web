{"ast":null,"code":"var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c('div', [_c('h1', [_vm._v(\"Dijkstra\")]), _c('p', [_vm._v(\"Dijkstra's algorithm is a graph traversal algorithm that is used to find the shortest path between a starting node and all other nodes in a weighted graph. It was developed by Dutch computer scientist Edsger W. Dijkstra in 1956.\")]), _c('p', [_vm._v(\"Dijkstra algorithm is used to find the shortest path from one vertex to all other vertices in the graph. It is suitable for both unweighted graphs and directed weighted graphs.\")]), _c('p', [_vm._v(\"Note that when using Dijkstra algorithm to find the shortest path, the weights of all edges in the graph must be guaranteed to be non-negative, otherwise the search process is easy to make mistakes.\")]), _c('h2', [_vm._v(\"The realization of Dijkstra algorithm\")]), _c('img', {\n    attrs: {\n      \"src\": require(\"../../assets/dij.gif\")\n    }\n  }), _c('br'), _vm._v(\" First of all, we can set up two sets, A and B. \"), _c('p', {\n    staticStyle: {\n      \"color\": \"red\"\n    }\n  }, [_vm._v(\"A is used to store the points where the shortest path has been calculated, and B is used to store the points where the shortest path has not been calculated.\")]), _vm._v(\" So let's do this at any point on the graph, and let's say we choose source at 0. So the distance from all the initial points to 0 we're going to assume is ∞, which means unreachable. The distance from source point 0 to itself is 0, and the initialization is as follows: Then set A is: {0}, set B is: {1,2,3,4,5,6} \"), _vm._m(0), _c('step1'), _c('step2'), _c('step3'), _c('step4'), _c('step5'), _c('step6'), _c('step7'), _c('step8'), _c('step9'), _c('step10'), _c('step11'), _c('step12'), _c('br'), _c('br'), _c('h2', [_vm._v(\"NOTE\")]), _c('h3', [_vm._v(\"1. Graphs with negative weighted edges cannot be processed (the optimal solution may not be obtained, so it is considered that negative weighted graphs cannot be processed), but only non-negative weighted graphs can be processed.\")]), _c('p', [_vm._v(\"Why? In this graph for example, according to Dijkstra's idea, first the 0 point is added to the set, then the 1 point is added to the set, then the 3 point is added to the set, and then the 2 is added to the set, then the 0-> 2 has been updated to 99-300, but it is no longer available. 3 (the original value was 2).\")]), _c('img', {\n    attrs: {\n      \"src\": require(\"../../assets/dij_note.png\")\n    }\n  }), _c('h3', [_vm._v(\"2. Only the single-source shortest path problem can be solved\")]), _c('br'), _c('br'), _c('h2', [_vm._v(\"Core Code\")]), _c('h3', [_vm._v(\"cpp\")]), _c('dij_cpp'), _c('h3', [_vm._v(\"java\")]), _c('dij_java'), _c('h3', [_vm._v(\"python\")]), _c('dij_python')], 1);\n};\nvar staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c('table', [_c('tr', {\n    staticClass: \"blue-row\"\n  }, [_c('td', [_vm._v(\"Vertex number\")]), _c('td', [_vm._v(\"Distance to source\")])]), _c('tr', {\n    staticClass: \"green-row\"\n  }, [_c('td', [_vm._v(\"0\")]), _c('td', [_vm._v(\"0\")])]), _c('tr', [_c('td', [_vm._v(\"1\")]), _c('td', [_vm._v(\"∞\")])]), _c('tr', [_c('td', [_vm._v(\"2\")]), _c('td', [_vm._v(\"∞\")])]), _c('tr', [_c('td', [_vm._v(\"3\")]), _c('td', [_vm._v(\"∞\")])]), _c('tr', [_c('td', [_vm._v(\"4\")]), _c('td', [_vm._v(\"∞\")])]), _c('tr', [_c('td', [_vm._v(\"5\")]), _c('td', [_vm._v(\"∞\")])]), _c('tr', [_c('td', [_vm._v(\"6\")]), _c('td', [_vm._v(\"∞\")])])]);\n}];\nexport { render, staticRenderFns };","map":{"version":3,"names":["render","_vm","_c","_self","_v","attrs","require","staticStyle","_m","staticRenderFns","staticClass"],"sources":["/Users/corzanx77/Desktop/Vue代码/corzanX/src/components/Introduction/AlgIntro_dij.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('h1',[_vm._v(\"Dijkstra\")]),_c('p',[_vm._v(\"Dijkstra's algorithm is a graph traversal algorithm that is used to find the shortest path between a starting node and all other nodes in a weighted graph. It was developed by Dutch computer scientist Edsger W. Dijkstra in 1956.\")]),_c('p',[_vm._v(\"Dijkstra algorithm is used to find the shortest path from one vertex to all other vertices in the graph. It is suitable for both unweighted graphs and directed weighted graphs.\")]),_c('p',[_vm._v(\"Note that when using Dijkstra algorithm to find the shortest path, the weights of all edges in the graph must be guaranteed to be non-negative, otherwise the search process is easy to make mistakes.\")]),_c('h2',[_vm._v(\"The realization of Dijkstra algorithm\")]),_c('img',{attrs:{\"src\":require(\"../../assets/dij.gif\")}}),_c('br'),_vm._v(\" First of all, we can set up two sets, A and B. \"),_c('p',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"A is used to store the points where the shortest path has been calculated, and B is used to store the points where the shortest path has not been calculated.\")]),_vm._v(\" So let's do this at any point on the graph, and let's say we choose source at 0. So the distance from all the initial points to 0 we're going to assume is ∞, which means unreachable. The distance from source point 0 to itself is 0, and the initialization is as follows: Then set A is: {0}, set B is: {1,2,3,4,5,6} \"),_vm._m(0),_c('step1'),_c('step2'),_c('step3'),_c('step4'),_c('step5'),_c('step6'),_c('step7'),_c('step8'),_c('step9'),_c('step10'),_c('step11'),_c('step12'),_c('br'),_c('br'),_c('h2',[_vm._v(\"NOTE\")]),_c('h3',[_vm._v(\"1. Graphs with negative weighted edges cannot be processed (the optimal solution may not be obtained, so it is considered that negative weighted graphs cannot be processed), but only non-negative weighted graphs can be processed.\")]),_c('p',[_vm._v(\"Why? In this graph for example, according to Dijkstra's idea, first the 0 point is added to the set, then the 1 point is added to the set, then the 3 point is added to the set, and then the 2 is added to the set, then the 0-> 2 has been updated to 99-300, but it is no longer available. 3 (the original value was 2).\")]),_c('img',{attrs:{\"src\":require(\"../../assets/dij_note.png\")}}),_c('h3',[_vm._v(\"2. Only the single-source shortest path problem can be solved\")]),_c('br'),_c('br'),_c('h2',[_vm._v(\"Core Code\")]),_c('h3',[_vm._v(\"cpp\")]),_c('dij_cpp'),_c('h3',[_vm._v(\"java\")]),_c('dij_java'),_c('h3',[_vm._v(\"python\")]),_c('dij_python')],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('tr',{staticClass:\"blue-row\"},[_c('td',[_vm._v(\"Vertex number\")]),_c('td',[_vm._v(\"Distance to source\")])]),_c('tr',{staticClass:\"green-row\"},[_c('td',[_vm._v(\"0\")]),_c('td',[_vm._v(\"0\")])]),_c('tr',[_c('td',[_vm._v(\"1\")]),_c('td',[_vm._v(\"∞\")])]),_c('tr',[_c('td',[_vm._v(\"2\")]),_c('td',[_vm._v(\"∞\")])]),_c('tr',[_c('td',[_vm._v(\"3\")]),_c('td',[_vm._v(\"∞\")])]),_c('tr',[_c('td',[_vm._v(\"4\")]),_c('td',[_vm._v(\"∞\")])]),_c('tr',[_c('td',[_vm._v(\"5\")]),_c('td',[_vm._v(\"∞\")])]),_c('tr',[_c('td',[_vm._v(\"6\")]),_c('td',[_vm._v(\"∞\")])])])\n}]\n\nexport { render, staticRenderFns }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}